#!/usr/bin/env python3
# coding: utf-8

# Creates a 'res' file which can be read by the D4 fit program. To call the
# fit program use 'fitjob_sub res_xyz.sh'.
# (Do not forget 'chmod +x res_xyz.sh'.)
#
# Execute in diretory where the three test sets are.


import sys
from pathlib import Path

try:
  import pandas as pd
except ModuleNotFoundError:
  sys.exit("Module 'pandas' not installed. Exiting.")

try:
  import numpy as np
except ModuleNotFoundError:
  sys.exit("Module 'numpy' not installed. Exiting.")


def getOmegas(test_file="NCIBLIND10/01-A/job.out"):
  count_criter = 0
  o = []

  path = Path(test_file)

  if not path.is_file():
    print(f"WARNING! Test file '{test_file}' not found. Using default omegas.")
    omegas = [100, 150, 200, 250, 300, 350, 400, 450]
    return omegas[::-1]

  with open(path) as f:
    for line in f:
      if line.startswith("omega"):
        o.append(int(line.strip().split()[1]))

      if "Convergence criterion met" in line:
        count_criter += 1

    # job with no omegas
    if len(o) == 0:
      o = [0]

    # check convergence for my multijob
    if count_criter != len(o):
      sys.exit(f"Convergence not reached in {test_file}.")

  return o


def getEnergyFromFile(path, omegas):
  path = Path(f"{path}/job.out")

  if not path.is_file():
    print(f"WARNING!!! File {path} not found. Skipping...")
    return

  e = []
  o = []
  count_criter = 0
  num_jobs = len(omegas)

  with open(path) as f:
    for line in f:
      if line.startswith("omega"):
        o.append(int(line.strip().split()[1]))

      if "Convergence criterion met" in line:
        energy = line.split()[1]
        e.append(float(energy))
        count_criter += 1

    # check convergence for my multijob
    if count_criter != num_jobs:
      sys.exit(f"Convergence not reached in {path}.")

    # check order of omegas
    if omegas[0] != 0:
      if o != omegas:
        sys.exit("Order of omegas wrong!")

  return e


def getDataTestSet(set_name, omegas, num_decimals=4):
  factor = 627.50947428

  df = pd.read_csv(f"{set_name}/ref.csv", dtype={"dimer": str})
  set_list = df["dimer"].to_list()
  set_ref = df["reference"].to_list()

  data = []
  for i, d in enumerate(set_list):
    dimer = f"{set_name}/{d}"
    monoA = f"{set_name}/{d.split('-')[0]}-A"
    monoB = f"{set_name}/{d.split('-')[0]}-B"

    e_dimer = getEnergyFromFile(dimer, omegas)
    e_monoA = getEnergyFromFile(monoA, omegas)
    e_monoB = getEnergyFromFile(monoB, omegas)

    temp = ["$tmer", f"{dimer}/${{f}}", f"{monoA}/${{f}}", f"{monoB}/${{f}}"]
    for j in range(len(omegas)):
      e = (e_dimer[j] - e_monoA[j] - e_monoB[j])*factor - set_ref[i]
      temp.append(np.around(e, decimals=num_decimals))

    data.append(temp)

  return data


def main():
  # setting some variables
  omegas = getOmegas()
  print(f"Found {len(omegas)} omega values: {omegas}\n")

  # get data
  s22x5 = getDataTestSet("S22x5", omegas)
  s66x8 = getDataTestSet("S66x8", omegas)
  nci = getDataTestSet("NCIBLIND10", omegas)

  # chain data together
  data = s22x5 + s66x8 + nci

  # Save data
  data = np.asarray(data, dtype=str)
  out_file = f"res_{Path.cwd().name.lower()}"

  for i, omega in enumerate(omegas):
    np.savetxt(f"{out_file}_{omega}.sh",
               data[:, [0, 1, 2, 3, i + 4]], delimiter=" ", fmt="%s")
    print(f"Saving fit template for omega={omega} to '{out_file}_{omega}.sh'.")


if __name__ == '__main__':
  main()
