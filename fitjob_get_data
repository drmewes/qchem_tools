#!/usr/bin/env python3
# coding: utf-8

import sys
from pathlib import Path

try:
  import pandas as pd
except ModuleNotFoundError:
  sys.exit("Module 'pandas' not installed. Exiting.")

try:
  import numpy as np
except ModuleNotFoundError:
  sys.exit("Module 'numpy' not installed. Exiting.")


def getOmegas(test_file="NCIBLIND10/01-A/job.out"):
  count_criter = 0
  o = []

  path = Path(test_file)

  if not path.is_file():
    print(f"WARNING! Test file '{test_file}' not found. Using default omegas.")
    omegas = [100, 150, 200, 250, 300, 350, 400, 450]
    return omegas[::-1]


  with open(path) as f:
    for line in f:
      if line.startswith("omega"):
        o.append(int(line.strip().split()[1]))

      if "Convergence criterion met" in line:
        count_criter += 1

    # check convergence for my multijob
    if count_criter != len(o):
      sys.exit(f"Convergence not reached in {test_file}.")

  return o


def getDataTestSet(set_name, omegas, num_decimals=4):
  factor = 627.50947428
  num_jobs = len(omegas)

  df = pd.read_csv(f"{set_name}/ref.csv", dtype={"dimer": str})
  set_list = df["dimer"].to_list()
  set_ref = df["reference"].to_list()

  data = []

  for i, d in enumerate(set_list):
    dimer = f"{set_name}/{d}"

    if set_name == "S22x5":
      monoA = f"{set_name}/{d.split('_')[0]}A"
      monoB = f"{set_name}/{d.split('_')[0]}B"
    elif set_name == "S66x8":
      monoA = f"{set_name}/{d.split('.')[0]}A"
      monoB = f"{set_name}/{d.split('.')[0]}B"
    elif set_name == "NCIBLIND10":
      if int(d) < 100:
        monoA = f"NCIBLIND10/{d[0]}A"
        monoB = f"NCIBLIND10/{d[0]}B"
      else:
        monoA = "NCIBLIND10/10A"
        monoB = "NCIBLIND10/10B"


    e_dimer = []
    o = []
    count_criter = 0
    with open(Path(f"{dimer}/job.out")) as f:
      for line in f:
        if line.startswith("omega"):
          o.append(int(line.strip().split()[1]))

        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_dimer.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit(f"Convergence not reached in {system}.")

      # check order of omegas
      if o != omegas:
        sys.exit("Order of omegas wrong!")

    e_monoA = []
    o = []
    count_criter = 0
    with open(Path(f"{monoA}/job.out")) as f:
      count_criter = 0

      for line in f:
        if line.startswith("omega"):
          o.append(int(line.strip().split()[1]))

        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoA.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit(f"Convergence not reached in {system}.")

      # check order of omegas
      if o != omegas:
        sys.exit("Order of omegas wrong!")

    e_monoB = []
    o = []
    count_criter = 0
    with open(Path(f"{monoB}/job.out")) as f:
      count_criter = 0

      for line in f:
        if line.startswith("omega"):
          o.append(int(line.strip().split()[1]))

        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoB.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit(f"Convergence not reached in {system}.")

      # check order of omegas
      if o != omegas:
        sys.exit("Order of omegas wrong!")


    temp = ["$tmer", f"{dimer}/${{f}}", f"{monoA}/${{f}}", f"{monoB}/${{f}}"]
    for j in range(num_jobs):
      e = (e_dimer[j] - e_monoA[j] - e_monoB[j])*factor - set_ref[i] 
      temp.append(np.around(e, decimals=num_decimals))

    data.append(temp)

  return data


def main():
  # setting some variables
  omegas = getOmegas()
  print(f"Found {len(omegas)} omega values: {omegas}\n")

  # get data
  s22x5 = getDataTestSet("S22x5", omegas)
  s66x8 = getDataTestSet("S66x8", omegas)
  nci = getDataTestSet("NCIBLIND10", omegas)

  # chain data together
  data = s22x5 + s66x8 + nci

  # Save data
  data = np.asarray(data, dtype=str)
  out_file = f"res_{Path.cwd().name.lower()}"

  for i, omega in enumerate(omegas):
    np.savetxt(f"{out_file}_{omega}.sh", data[:, [0, 1, 2, 3, i + 4]], delimiter=" ", fmt="%s")
    print(f"Saving fit template for omega={omega} to '{out_file}_{omega}.sh'.")


if __name__ == '__main__':
  main()