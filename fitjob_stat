#!/usr/bin/env python3
# coding: utf-8

import numpy as np
import sys
from pathlib import Path
import pandas as pd


def md(data, axis=None):
  return np.mean(data, axis)

def mad(data, axis=None):
  return np.mean(np.absolute(data - np.mean(data, axis)), axis)

def mae(data):
  return np.mean(np.absolute(data))

def rmsd(data):
  return np.sqrt(np.mean(np.square(data)))


def main():
  # setting some variables
  omegas = [100, 150, 200, 250, 300, 350, 400, 450]
  num_jobs = len(omegas)

  factor = 627.50947428
  num_decimals = 4
  data = []

  # Reading in reference data
  nci = pd.read_csv("NCIBLIND10/ref.csv", dtype={"dimer": str})
  nci_list = nci["dimer"].to_list()
  nci_ref = nci["reference"].to_list()

  s22x5 = pd.read_csv("S22x5/ref.csv", dtype={"dimer": str})
  s22x5_list = s22x5["dimer"].to_list()
  s22x5_ref = s22x5["reference"].to_list()

  s66x8 = pd.read_csv("S66x8/ref.csv", dtype={"dimer": str})
  s66x8_list = s66x8["dimer"].to_list()
  s66x8_ref = s66x8["reference"].to_list()

  # S22x5
  for i, d in enumerate(s22x5_list):
    dimer = f"S22x5/{d}"
    monoA = f"S22x5/{d.split('_')[0]}A"
    monoB = f"S22x5/{d.split('_')[0]}B"

    e_dimer = []
    with open(Path(f"{dimer}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_dimer.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e_monoA = []
    with open(Path(f"{monoA}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoA.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e_monoB = []
    with open(Path(f"{monoB}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoB.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()


    e = (np.asarray(e_dimer) - np.asarray(e_monoA) - np.asarray(e_monoB))*factor - s22x5_ref[i]
    data.append([dimer] + e.tolist())


  # S66x8
  for i, d in enumerate(s66x8_list):
    dimer = f"S66x8/{d}"
    monoA = f"S66x8/{d.split('.')[0]}A"
    monoB = f"S66x8/{d.split('.')[0]}B"

    e_dimer = []
    with open(Path(f"{dimer}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_dimer.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e_monoA = []
    with open(Path(f"{monoA}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoA.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e_monoB = []
    with open(Path(f"{monoB}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoB.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e = (np.asarray(e_dimer) - np.asarray(e_monoA) - np.asarray(e_monoB))*factor - s66x8_ref[i]
    data.append([dimer] + e.tolist())


  # NCIBLIND10
  for i, d in enumerate(nci_list):
    dimer = f"NCIBLIND10/{d}"

    if int(d) < 100:
      monoA = f"NCIBLIND10/{d[0]}A"
      monoB = f"NCIBLIND10/{d[0]}B"
    else:
      monoA = "NCIBLIND10/10A"
      monoB = "NCIBLIND10/10B"

    e_dimer = []
    with open(Path(f"{dimer}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_dimer.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e_monoA = []
    with open(Path(f"{monoA}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoA.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e_monoB = []
    with open(Path(f"{monoB}/job.out"), errors='ignore') as f:
      count_criter = 0

      for line in f:
        if "Convergence criterion met" in line:
          energy = line.split()[1]
          e_monoB.append(float(energy))
          count_criter += 1

      # check convergence for my multijob
      if count_criter != num_jobs:
        sys.exit()

    e = (np.asarray(e_dimer) - np.asarray(e_monoA) - np.asarray(e_monoB))*factor - nci_ref[i]
    data.append([dimer] + e.tolist())


  # show data
  data = np.asarray(data)
  cols = ["system"] + omegas
  df = pd.DataFrame(columns=cols, data=data)

  cols = [i for i in df.columns if i != "system"]
  for col in cols:
    df[col] = pd.to_numeric(df[col])

  df = df.round(num_decimals)
  
  print(f"Data: E_int - E_ref for {Path.cwd().name}")
  print("---------------------------------")
  print(df)


  ####################
  ## Get Statistics ##
  ####################

  MDs = ["MD"]
  for col in cols:
    MDs.append(md(df[col]))

  MADs = ["MAD"]
  for col in cols:
    MADs.append(mad(df[col]))

  MAEs = ["MAE"]
  for col in cols:
    MAEs.append(mae(df[col]))

  RMSDs = ["RMSD"]
  for col in cols:
    RMSDs.append(rmsd(df[col]))

  df = pd.DataFrame(columns=["measure"] + omegas, data=np.array([MDs, MADs, MAEs, RMSDs]))

  cols = [i for i in df.columns if i != "measure"]
  for col in cols:
    df[col] = pd.to_numeric(df[col])

  df = df.round(num_decimals)
  print("\n")
  print("Statistics")
  print("----------")
  print(df)



if __name__ == '__main__':
  main()