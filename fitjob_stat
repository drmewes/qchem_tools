#!/usr/bin/env python3
# coding: utf-8

import os
import sys
import argparse
from pathlib import Path

try:
  import pandas as pd
except ModuleNotFoundError:
  sys.exit("Module 'pandas' not installed. Exiting.")

try:
  import numpy as np
except ModuleNotFoundError:
  sys.exit("Module 'numpy' not installed. Exiting.")


def md(error):
  # md = mean(error)
  return np.mean(error)


def mad(error):
  # mad = mean( abs( error - mean(error) ) )
  return np.mean(np.absolute(error - np.mean(error)))


def mae(error):
  # mae = mean( abs( error ) )
  return np.mean(np.absolute(error))


def std(error):
  # std = sqrt( mean( abs( error - mean(error) )**2 ) )
  return np.std(error, dtype=np.float64)


def rmsd(error):
  return np.sqrt(np.mean(np.square(error)))


def getOmegas(test_file="NCIBLIND10/01-A/job.out"):
  count_criter = 0
  o = []

  path = Path(test_file)

  if not path.is_file():
    print(f"WARNING! Test file '{test_file}' not found. Using default omegas.")
    omegas = [100, 150, 200, 250, 300, 350, 400, 450]
    return omegas[::-1]

  with open(path) as f:
    for line in f:
      if line.startswith("omega"):
        o.append(int(line.strip().split()[1]))

      if "Convergence criterion met" in line:
        count_criter += 1

    # job with no omegas
    if len(o) == 0:
      o = [0]

    # check convergence for my multijob
    if count_criter != len(o):
      sys.exit(f"Convergence not reached in {test_file}.")

  return o


def getEnergyFromFile(path, omegas):
  path = Path(f"{path}/job.out")

  if not path.is_file():
    print(f"WARNING!!! File {path} not found. Skipping...")
    return

  e = []
  o = []
  count_criter = 0
  num_jobs = len(omegas)

  with open(path) as f:
    for line in f:
      if line.startswith("omega"):
        o.append(int(line.strip().split()[1]))

      if "Convergence criterion met" in line:
        energy = line.split()[1]
        e.append(float(energy))
        count_criter += 1

    # check convergence for my multijob
    if count_criter != num_jobs:
      sys.exit(f"Convergence not reached in {path}.")

    # check order of omegas
    if omegas[0] != 0:
      if o != omegas:
        sys.exit("Order of omegas wrong!")

  return e


def getDataTestSet(set_name, omegas):
  factor = 627.50947428

  df = pd.read_csv(f"{set_name}/ref.csv", dtype={"dimer": str})
  set_list = df["dimer"].to_list()
  set_ref = df["reference"].to_list()

  data = []
  for i, d in enumerate(set_list):
    dimer = f"{set_name}/{d}"
    monoA = f"{set_name}/{d.split('-')[0]}-A"
    monoB = f"{set_name}/{d.split('-')[0]}-B"

    e_dimer = getEnergyFromFile(dimer, omegas)
    e_monoA = getEnergyFromFile(monoA, omegas)
    e_monoB = getEnergyFromFile(monoB, omegas)

    e = (np.asarray(e_dimer) - np.asarray(e_monoA) -
         np.asarray(e_monoB))*factor - set_ref[i]
    data.append([dimer] + e.tolist())

  return data


def getFile(path):
  p = Path(path)

  if not p.is_file():
    sys.exit(f"File '{p}' not found. Statistics skipped.")

  data = np.genfromtxt(p)
  smpl = data[:, 0] - data[:, 1]

  md_ = md(smpl)
  mae_ = mae(smpl)
  rmsd_ = rmsd(smpl)
  std_ = std(smpl)

  return md_, mae_, rmsd_, std_


def getAll(args):
  omegas = []
  MDs = []
  MAEs = []
  RMSDs = []
  STDs = []
  data = [["func", "omega", "MD", "MAD", "RMSD", "STD"]]

  for filename in sorted(Path(".").rglob("*data")):
    md_, mae_, rmsd_, std_ = getFile(filename)
    s = filename.name.strip("data").split("_")
    func = s[0].upper().replace("W", "w").replace("H", "h").replace("CAM", "cam")
    if "orca" in s:
      func = f"{func}-orca"
    elif "tm" in s:
      func = f"{func}-tm"

    print(s)
    if s[1].isdigit():
      omega = s[1]
    else:
      omega = 0

    data.append([func, omega, md_, mae_, rmsd_, std_])
    MDs.append(md_)
    MAEs.append(mae_)
    RMSDs.append(rmsd_)
    STDs.append(std_)

  df = pd.DataFrame(data)
  df.columns = df.iloc[0]
  df = df.iloc[1:].reset_index(drop=True)
  print(df.to_string(index=False))

  if args.save:
    out_file = f"stat_{Path.cwd().name.lower()}_fit.csv"
    save_loc = os.path.join(os.path.realpath("."), out_file)
    df.to_csv(save_loc, index=False)
    print("\nSaved data to {}.".format(save_loc))

  #print('\n'.join(' '.join(str(x) for x in row) for row in data))


def stat_fit(args):
  omegas = []
  MDs = []
  MAEs = []
  RMSDs = []
  funcs = []

  for filename in sorted(Path(".").glob("*d4*.out")):
    paramline = False
    found = False
    with open(filename) as f:
      func = filename.name.split("_")[0]
      func = func.upper().replace("W", "w").replace("H", "h").replace("CAM", "cam")
      funcs.append(func)

      omega = filename.name.split("_")[1]
      if not omega.isdigit():
        omega = 0
      omegas.append(omega)

      for line in f:
        if line.startswith("Final run:"):
          paramline = True
          found = True
          continue

        if paramline:
          l = line.strip().split()
          MDs.append(l[5])
          MAEs.append(l[7])
          RMSDs.append(l[9])
          paramline = False

    if not found:
      print(f"WARNING! No parameters found in {filename}.")
      MDs.append("NaN")
      MAEs.append("NaN")
      RMSDs.append("NaN")

  data = []
  for i, omega in enumerate(omegas):
    data.append([funcs[i], omega, MDs[i], MAEs[i], RMSDs[i], ])

  cols = ["func", "omega", "MD", "MAD", "RMSD"]
  df = pd.DataFrame(columns=cols, data=data)
  df["omega"] = pd.to_numeric(df["omega"])
  df = df.sort_values(by="omega")
  print(df.to_string(index=False))

  if args.save:
    out_file = f"stat_{Path.cwd().name.lower()}_fit.csv"
    save_loc = os.path.join(os.path.realpath("."), out_file)
    df.to_csv(save_loc, index=False)
    print("\nSaved data to {}.".format(save_loc))


def main():
  parser = argparse.ArgumentParser(description="Get statistical data.")
  parser.add_argument("-s", "--save", action="store_true", help="Save output.")
  parser.add_argument("-o", "--old", action="store_true", help="Get stats from d4.out file.")
  args = parser.parse_args()

  if args.old:
    stat_fit(args)
  else:
    getAll(args)


if __name__ == '__main__':
  main()
